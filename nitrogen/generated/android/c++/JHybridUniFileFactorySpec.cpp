///
/// JHybridUniFileFactorySpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridUniFileFactorySpec.hpp"

// Forward declaration of `HybridUniFileSpec` to properly resolve imports.
namespace margelo::nitro::unifile { class HybridUniFileSpec; }

#include <optional>
#include <memory>
#include "HybridUniFileSpec.hpp"
#include "JHybridUniFileSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include <string>

namespace margelo::nitro::unifile {

  jni::local_ref<JHybridUniFileFactorySpec::jhybriddata> JHybridUniFileFactorySpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridUniFileFactorySpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridUniFileFactorySpec::initHybrid),
    });
  }

  size_t JHybridUniFileFactorySpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> JHybridUniFileFactorySpec::fromUri(const std::string& uri) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridUniFileSpec::javaobject>(jni::alias_ref<jni::JString> /* uri */)>("fromUri");
    auto __result = method(_javaPart, jni::make_jstring(uri));
    return __result != nullptr ? std::make_optional(JNISharedPtr::make_shared_from_jni<JHybridUniFileSpec>(jni::make_global(__result))) : std::nullopt;
  }

} // namespace margelo::nitro::unifile
