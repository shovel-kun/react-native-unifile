///
/// HybridUniFileSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridUniFileSpec.hpp"




namespace margelo::nitro::unifile {

  using namespace facebook;

  class JHybridUniFileSpec: public jni::HybridClass<JHybridUniFileSpec, JHybridObject>,
                            public virtual HybridUniFileSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/unifile/HybridUniFileSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridUniFileSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridUniFileSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridUniFileSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridUniFileSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::string getUri() override;
    void setUri(const std::string& uri) override;
    std::optional<std::string> getFileName() override;
    void setFileName(const std::optional<std::string>& fileName) override;
    std::optional<std::string> getType() override;
    void setType(const std::optional<std::string>& type) override;
    std::optional<std::string> getFilePath() override;
    void setFilePath(const std::optional<std::string>& filePath) override;
    std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> getParentFile() override;
    void setParentFile(const std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>>& parentFile) override;
    bool getIsDirectory() override;
    void setIsDirectory(bool isDirectory) override;
    bool getIsFile() override;
    void setIsFile(bool isFile) override;
    std::optional<std::string> getExtension() override;
    void setExtension(const std::optional<std::string>& extension) override;
    std::optional<std::string> getNameWithoutExtension() override;
    void setNameWithoutExtension(const std::optional<std::string>& nameWithoutExtension) override;
    std::string getDisplayablePath() override;
    void setDisplayablePath(const std::string& displayablePath) override;

  public:
    // Methods
    bool exists() override;
    std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> findFile(const std::string& path) override;
    std::vector<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> listFiles() override;
    bool deleteFile() override;
    std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> createDirectory(const std::string& displayName) override;
    std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> createFile(const std::string& displayName) override;
    bool renameTo(const std::string& displayName) override;
    std::string lastModified() override;
    std::string length() override;
    bool canRead() override;
    bool canWrite() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridUniFileSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::unifile
