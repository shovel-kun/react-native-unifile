///
/// HybridUniFileSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridUniFileSpec` to properly resolve imports.
namespace margelo::nitro::unifile { class HybridUniFileSpec; }

#include <string>
#include <optional>
#include <memory>
#include "HybridUniFileSpec.hpp"
#include <vector>

namespace margelo::nitro::unifile {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `UniFile`
   * Inherit this class to create instances of `HybridUniFileSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridUniFile: public HybridUniFileSpec {
   * public:
   *   HybridUniFile(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridUniFileSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridUniFileSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridUniFileSpec() override = default;

    public:
      // Properties
      virtual std::string getUri() = 0;
      virtual void setUri(const std::string& uri) = 0;
      virtual std::optional<std::string> getFileName() = 0;
      virtual void setFileName(const std::optional<std::string>& fileName) = 0;
      virtual std::optional<std::string> getType() = 0;
      virtual void setType(const std::optional<std::string>& type) = 0;
      virtual std::optional<std::string> getFilePath() = 0;
      virtual void setFilePath(const std::optional<std::string>& filePath) = 0;
      virtual std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> getParentFile() = 0;
      virtual void setParentFile(const std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>>& parentFile) = 0;
      virtual bool getIsDirectory() = 0;
      virtual void setIsDirectory(bool isDirectory) = 0;
      virtual bool getIsFile() = 0;
      virtual void setIsFile(bool isFile) = 0;
      virtual std::optional<std::string> getExtension() = 0;
      virtual void setExtension(const std::optional<std::string>& extension) = 0;
      virtual std::optional<std::string> getNameWithoutExtension() = 0;
      virtual void setNameWithoutExtension(const std::optional<std::string>& nameWithoutExtension) = 0;
      virtual std::string getDisplayablePath() = 0;
      virtual void setDisplayablePath(const std::string& displayablePath) = 0;

    public:
      // Methods
      virtual bool exists() = 0;
      virtual std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> findFile(const std::string& path) = 0;
      virtual std::vector<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> listFiles() = 0;
      virtual bool deleteFile() = 0;
      virtual std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> createDirectory(const std::string& displayName) = 0;
      virtual std::optional<std::shared_ptr<margelo::nitro::unifile::HybridUniFileSpec>> createFile(const std::string& displayName) = 0;
      virtual bool renameTo(const std::string& displayName) = 0;
      virtual std::string lastModified() = 0;
      virtual std::string length() = 0;
      virtual bool canRead() = 0;
      virtual bool canWrite() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "UniFile";
  };

} // namespace margelo::nitro::unifile
